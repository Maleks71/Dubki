//
//  RouteDataModel.swift
//  Dubki
//
//  Created by Alexander Morenko on 30.10.15.
//  Copyright ¬© 2015 LionSoft, LLC. All rights reserved.
//

import UIKit

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
class RouteStep {
    // –≤–∏–¥ —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    enum RouteStepType {
        case None
        case Total
        case Bus
        case Train
        case Subway
        case Onfoot
        case Transition
    }
    
    var type: RouteStepType  // –≤–∏–¥ —à–∞–≥–∞
    var from: String?        // –æ—Ç–∫—É–¥–∞ (—Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ, –∂/–¥, –∞–≤—Ç–æ–±—É—Å–∞)
    var to: String?          // –∫—É–¥–∞ (—Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ, –∂/–¥, –∞–≤—Ç–æ–±—É—Å–∞)
    var trainName: String?   // –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –∏–ª–∏ –≤–µ—Ç–∫–∏ –º–µ—Ç—Ä–æ
    var stops: String?       // –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∂/–¥ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∏ –º–µ—Ç—Ä–æ
    var departure: NSDate    // –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    var arrival: NSDate      // –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    var duration: Int        // –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    var map: String?         // –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–ª–µ–ª–µ–π —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    var url: String?         // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    
    // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞ - –≤–∏–¥ —à–∞–≥–∞ –∏ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω)
    var title: String? {
        get {
            switch (type) {
            case .None:
                return NSLocalizedString("NoneParameter", comment: "")
 
            case .Total:
                //let titleFormat = NSLocalizedString("TotalTitleFormat", comment: "")
                return String (format: "üèÅ %@ ‚Üí %@", from ?? "?", to ?? "?")
            
            case .Bus:
                return NSLocalizedString("Bus", comment: "") // "üöå –ê–≤—Ç–æ–±—É—Å"
            
            case .Train:
                return NSLocalizedString("Train", comment: "") // "üöä –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞"
            
            case .Subway:
                return NSLocalizedString("Subway", comment: "") // "üöá –ú–µ—Ç—Ä–æ"
            
            case .Onfoot:
                return NSLocalizedString("OnFoot", comment: "") // "üö∂ –ü–µ—à–∫–æ–º"

            case .Transition:
                return NSLocalizedString("Transition", comment: "") // "üö∂ –ü–µ—Ä–µ—Ö–æ–¥"
            }
        }
    }
    
    // –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞ - —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–∫—É–¥–∞/–∫—É–¥–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è/–ø—Ä–∏–±—ã—Ç–∏—è (–¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω)
    var detail: String? {
        get {
            let timeDeparture = departure.string("HH:mm") ?? "?"
            let timeArrival = arrival.string("HH:mm") ?? "?"

            switch (type) {
            case .None:
                return ""
            
            case .Total:
                let dateDeparture = departure.string("dd MMM HH:mm") ?? "?"
                //let dateArrival = arrival?.stringByFormat("dd MMM HH:mm") ?? "?"
                let detailFormat = NSLocalizedString("TotalDetailFormat", comment: "")
                return String(format: detailFormat, dateDeparture, timeArrival, duration ?? 0)
            
            case .Bus:
                return String(format: "%@ (%@) ‚Üí %@ (%@)", from ?? "?", timeDeparture, to ?? "?", timeArrival)
            
            case .Train:
                let detailFormat = NSLocalizedString("TrainDetailFormat", comment: "")
                return String(format: detailFormat, trainName ?? "?", timeDeparture, timeArrival, stops ?? "–≤–µ–∑–¥–µ", to ?? "?")
            
            case .Subway:
                return String(format: "%@ (%@) ‚Üí %@ (%@)", from ?? "?", timeDeparture, to ?? "?", timeArrival)
            
            case .Onfoot:
                let detailFormat = NSLocalizedString("OnfootDetailFormat", comment: "")
                return String(format: detailFormat, duration ?? 0)

            case .Transition:
                let detailFormat = NSLocalizedString("TransitDetailFormat", comment: "")
                return String(format: detailFormat, from ?? "?", to ?? "?", duration ?? 0)
            }
        }
    }

    init() {
        type = .None
        departure = NSDate()
        arrival = NSDate()
        duration = 0
    }
    
    init(type: RouteStepType) {
        self.type = type
        departure = NSDate()
        arrival = NSDate()
        duration = 0
    }
}

class RouteDataModel: NSObject {
    
    // Singleton Class
    static let sharedInstance = RouteDataModel()

    // –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏–π
    let dormitories = NSArray(contentsOfFile: NSBundle.mainBundle().pathForResource("Dormitories", ofType: "plist")!) as? [Dictionary<String, AnyObject>]
    // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø—É—Å–æ–≤
    let campuses = NSArray(contentsOfFile: NSBundle.mainBundle().pathForResource("Campuses", ofType: "plist")!) as? [Dictionary<String, AnyObject>]
    // –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
    let subways = NSDictionary(contentsOfFile: NSBundle.mainBundle().pathForResource("Subways", ofType: "plist")!) as? Dictionary<String, AnyObject>
    // –û–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∂/–¥
    let stations = NSDictionary(contentsOfFile: NSBundle.mainBundle().pathForResource("Stations", ofType: "plist")!) as? Dictionary<String, AnyObject>
    
    let scheduleService = ScheduleService.sharedInstance
    
    // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
    //var direction: Int? // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑/–≤ –î—É–±–∫–∏
    //var campus: Dictionary<String, AnyObject>? // –≤/–∏–∑ –ö–∞–º–ø—É—Å
    //var when: NSDate? // –∫–æ–≥–¥–∞ - –≤—Ä–µ–º—è
    // –ú–∞—Ä—à—Ä—É—Ç
    var route: [RouteStep] = [RouteStep(type: .None)]
    
    override init() {
        super.init()
        
        // load array of campuses from resource
        //let dormitoriesPath = NSBundle.mainBundle().pathForResource("Dormitories", ofType: "plist")
        //let dormitories = NSArray(contentsOfFile: dormitoriesPath!)
        //print(dormitories?.count)
        
    }
    
    /**
    Calculates a route as if timestamp is the time of departure
    
    Args:
        direction (Int): flow from/to dormitory
        campus (Dictionary): place edu of arrival/departure
        timestamp(Optional[NSDate]): time of departure.
            Defaults to the current time plus 10 minutes.
        src(Optional[str]): function caller ID (used for logging)
    
    Returns:
        route (Array): a calculated route
    */
    func calculateRouteByDeparture(departure: NSDate, direction: Int, campus: Dictionary<String, AnyObject>) {
        
        //self.direction = direction
        //self.campus = campus
        //self.when = when
        //if when == nil {
        //    self.when = NSDate().dateByAddingTimeInterval(600) // —Å–µ–π—á–∞—Å + 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–±–æ—Ä—ã
        //}
        
        //if campus == nil {
        //    route = [RouteStep(type: .None)]
        //    return
        //}
        
        let dorm = dormitories![0] // –æ–±—â–µ–∂–∏—Ç–∏–µ

        route = [RouteStep]() // –æ—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        
        let timestamp = departure.dateByAddingMinute(10)! // 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–±–æ—Ä—ã

        if direction == 0 {
            // –∏–∑ –î—É–±–∫–æ–≤
            
            // –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç–∏
            let way = RouteStep(type: .Total)
            way.from = dorm["title"] as? String
            way.to = campus["title"] as? String
            route.append(way)
           
            // –ú–∞—Ä—à—Ä—É—Ç: –ê–≤—Ç–æ–±—É—Å->–ü–µ—Ä–µ—Ö–æ–¥->–≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞->–ü–µ—Ä–µ—Ö–æ–¥->–ú–µ—Ç—Ä–æ->–ü–µ—à–∫–æ–º

            // –∞–≤—Ç–æ–±—É—Å–æ–º
            let bus = getNearestBusByDeparture(timestamp, from: "–î—É–±–∫–∏", to: "–û–¥–∏–Ω—Ü–æ–≤–æ")
            route.append(bus)
            
            // —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            var subwayFrom: String?     // —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
            var transitArrival: NSDate? // –≤—Ä–µ–º—è –ø—Ä–µ–±—ã—Ç–∏—è –∫ –º–µ—Ç—Ä–æ
            
            if bus.to == "–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä" {
                // —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ

                subwayFrom = "slavyansky_bulvar"
                // –ø–µ—Ä–µ—Ö–æ–¥ –ê–≤—Ç–æ–±—É—Å->–ú–µ—Ç—Ä–æ
                let transit = RouteStep(type: .Transition)
                transit.from = NSLocalizedString("Bus", comment: "") // "–ê–≤—Ç–æ–±—É—Å"
                transit.to = bus.to
                transit.duration = 5
                transit.departure = bus.arrival
                transit.arrival = transit.departure.dateByAddingMinute(transit.duration)!
                if transit.duration > 0 {
                    route.append(transit)
                }
                
                // –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
                transitArrival = transit.arrival
           } else {
                // —Å—Ç–∞–Ω—Ü–∏–∏ –∂/–¥
                let stationFrom = stations![(dorm["station"] as? String)!] as! Dictionary<String, AnyObject>
                let stationTo = stations![(campus["station"] as? String)!] as! Dictionary<String, AnyObject>
                
                // –ø–µ—Ä–µ—Ö–æ–¥ –ê–≤—Ç–æ–±—É—Å->–°—Ç–∞–Ω—Ü–∏—è
                let transit1 = RouteStep(type: .Transition)
                transit1.from = NSLocalizedString("Bus", comment: "") // "–ê–≤—Ç–æ–±—É—Å"
                transit1.to = NSLocalizedString("Station", comment: "") // "–°—Ç–∞–Ω—Ü–∏—è"
                transit1.duration = stationFrom["transit"] as! Int
                transit1.departure = bus.arrival
                transit1.arrival = transit1.departure.dateByAddingMinute(transit1.duration)!
                if transit1.duration > 0 {
                    route.append(transit1)
                }
                
                // —ç–ª–µ–∫—Ç—Ä–∏—á–∫–æ–π
                let train = getNearestTrainByDeparture(transit1.arrival, from: stationFrom, to: stationTo)
                route.append(train)
                
                // —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
                subwayFrom = stationTo["subway"] as? String
                
                // –ø–µ—Ä–µ—Ö–æ–¥ –°—Ç–∞–Ω—Ü–∏—è->–ú–µ—Ç—Ä–æ
                let transit2 = RouteStep(type: .Transition)
                transit2.from = stationTo["title"] as? String
                transit2.to = subways![subwayFrom!] as? String
                transit2.duration = stationTo["transit"] as! Int
                transit2.departure = train.arrival
                transit2.arrival = transit2.departure.dateByAddingMinute(transit2.duration)!
                if transit2.duration > 0 {
                    route.append(transit2)
                }
                
                // –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
                transitArrival = transit2.arrival
            }

            // –Ω–∞ –º–µ—Ç—Ä–æ
            let subwayTo = campus["subway"] as? String
            let subway = getNearestSubwayByDeparture(transitArrival!, from: subwayFrom!, to: subwayTo!)
            route.append(subway)
            
            // –ø–µ—à–∫–æ–º
            let onfoot = getNearestOnFootByDeparture(subway.arrival, edu: campus)
            route.append(onfoot)
            
            // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏
            way.departure = bus.departure.dateByAddingMinute(-10)! // 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–±–æ—Ä—ã
            way.arrival = onfoot.arrival
            way.duration = Int(way.arrival.timeIntervalSinceDate(way.departure) / 60.0)
            
        } else {
            // –≤ –î—É–±–∫–∏

            // –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç–∏
            let way = RouteStep(type: .Total)
            way.from = campus["title"] as? String
            way.to = dorm["title"] as? String
            route.append(way)
            
            // –ú–∞—Ä—à—Ä—É—Ç: –ü–µ—à–∫–æ–º->–ú–µ—Ç—Ä–æ->–ü–µ—Ä–µ—Ö–æ–¥->–≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞->–ü–µ—Ä–µ—Ö–æ–¥->–ê–≤—Ç–æ–±—É—Å

            // –ø–µ—à–∫–æ–º
            let onfoot = getNearestOnFootByDeparture(timestamp, edu: campus)
            route.append(onfoot)
            
            // —Å—Ç–∞–Ω—Ü–∏–∏ –∂/–¥
            let stationFrom = stations![(campus["station"] as? String)!] as! Dictionary<String, AnyObject>
            
            // –Ω–∞ –º–µ—Ç—Ä–æ
            let subwayFrom = campus["subway"] as? String
            let subwayTo = stationFrom["subway"] as? String
            let subway = getNearestSubwayByDeparture(onfoot.arrival, from: subwayFrom!, to: subwayTo!)
            route.append(subway)

            //TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–±—É—Å–∞ –æ—Ç –º.–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä
            
            // –ø–µ—Ä–µ—Ö–æ–¥ –ú–µ—Ç—Ä–æ->–°—Ç–∞–Ω—Ü–∏—è
            let transit1 = RouteStep(type: .Transition)
            transit1.from = subways![subwayTo!] as? String
            transit1.to = stationFrom["title"] as? String
            transit1.duration = stationFrom["transit"] as! Int
            transit1.departure = subway.arrival
            transit1.arrival = transit1.departure.dateByAddingMinute(transit1.duration)!
            if transit1.duration > 0 {
                route.append(transit1)
            }

            //—ç–ª–µ–∫—Ç—Ä–∏—á–∫–æ–π
            let stationTo = stations![(dorm["station"] as? String)!] as! Dictionary<String, AnyObject>
            let train = getNearestTrainByDeparture(transit1.arrival, from: stationFrom, to: stationTo)
            route.append(train)

            // –ø–µ—Ä–µ—Ö–æ–¥ –°—Ç–∞–Ω—Ü–∏—è->–ê–≤—Ç–æ–±—É—Å
            let transit2 = RouteStep(type: .Transition)
            transit2.from = NSLocalizedString("Station", comment: "") // "–°—Ç–∞–Ω—Ü–∏—è"
            transit2.to = NSLocalizedString("Bus", comment: "") // "–ê–≤—Ç–æ–±—É—Å"
            transit2.duration = stationTo["transit"] as! Int
            transit2.departure = train.arrival
            transit2.arrival = transit2.departure.dateByAddingMinute(transit2.duration)!
            if transit2.duration > 0 {
                route.append(transit2)
            }

            // –∞–≤—Ç–æ–±—É—Å–æ–º
            let bus = getNearestBusByDeparture(transit2.arrival, from: "–û–¥–∏–Ω—Ü–æ–≤–æ", to: "–î—É–±–∫–∏")
            route.append(bus)
            
            // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏
            way.departure = onfoot.departure
            way.arrival = bus.arrival
            way.duration = Int(way.arrival.timeIntervalSinceDate(way.departure) / 60.0)
        }
    }

    /**
     Calculates a route as if timestamp is the time of arrival
     
     Args:
     direction (Int): flow from/to dormitory
     campus (Dictionary): place edu of arrival/departure
     timestampEnd(NSDate): expected time of arrival
     
     Returns:
     route (Array): a calculated route
     */
    func calculateRouteByArrival(arrival: NSDate, direction: Int, campus: Dictionary<String, AnyObject>) {
        let dorm = dormitories![0] // –æ–±—â–µ–∂–∏—Ç–∏–µ
        
        route = [RouteStep]() // –æ—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        
        let timestamp = arrival.dateByAddingMinute(-10)! // –ø—Ä–∏–±—ã—Ç—å –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

        if direction == 0 {
            // –∏–∑ –î—É–±–∫–æ–≤
            
            // –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç–∏
            let way = RouteStep(type: .Total)
            way.from = dorm["title"] as? String
            way.to = campus["title"] as? String
            route.append(way)
            
            // –ú–∞—Ä—à—Ä—É—Ç: –ê–≤—Ç–æ–±—É—Å->–ü–µ—Ä–µ—Ö–æ–¥->–≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞->–ü–µ—Ä–µ—Ö–æ–¥->–ú–µ—Ç—Ä–æ->–ü–µ—à–∫–æ–º

            // —Å—Ç–∞–Ω—Ü–∏–∏ –∂/–¥
            let stationFrom = stations![(dorm["station"] as? String)!] as! Dictionary<String, AnyObject>
            let stationTo = stations![(campus["station"] as? String)!] as! Dictionary<String, AnyObject>

            // —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            let subwayFrom = stationTo["subway"] as? String
            let subwayTo = campus["subway"] as? String

            // –ø–µ—à–∫–æ–º
            let onfoot = getNearestOnFootByArrival(timestamp, edu: campus)
            
            // –Ω–∞ –º–µ—Ç—Ä–æ
            let subway = getNearestSubwayByArrival(onfoot.departure, from: subwayFrom!, to: subwayTo!)
            
            // –ø–µ—Ä–µ—Ö–æ–¥ –°—Ç–∞–Ω—Ü–∏—è->–ú–µ—Ç—Ä–æ
            let transit2 = RouteStep(type: .Transition)
            transit2.from = stationTo["title"] as? String
            transit2.to = subways![subwayFrom!] as? String
            transit2.duration = stationTo["transit"] as! Int
            transit2.departure = subway.departure.dateByAddingMinute(-transit2.duration)!
            transit2.arrival = subway.departure

            // —ç–ª–µ–∫—Ç—Ä–∏—á–∫–æ–π
            let train = getNearestTrainByArrival(transit2.departure, from: stationFrom, to: stationTo)

            // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏
            transit2.departure = train.arrival
            transit2.arrival = transit2.departure.dateByAddingMinute(transit2.duration)!
            
            subway.departure = transit2.arrival
            subway.arrival = subway.departure.dateByAddingMinute(subway.duration)!
            
            onfoot.departure = subway.arrival
            onfoot.arrival = onfoot.departure.dateByAddingMinute(onfoot.duration)!
            
            // –ø–µ—Ä–µ—Ö–æ–¥ –ê–≤—Ç–æ–±—É—Å->–°—Ç–∞–Ω—Ü–∏—è
            let transit1 = RouteStep(type: .Transition)
            transit1.from = NSLocalizedString("Bus", comment: "") // "–ê–≤—Ç–æ–±—É—Å"
            transit1.to = NSLocalizedString("Station", comment: "") // "–°—Ç–∞–Ω—Ü–∏—è"
            transit1.duration = stationFrom["transit"] as! Int
            transit1.departure = train.departure.dateByAddingMinute(-transit1.duration)!
            transit1.arrival = train.departure

            // –∞–≤—Ç–æ–±—É—Å–æ–º
            let bus = getNearestBusByArrival(transit1.departure, from: "–î—É–±–∫–∏", to: "–û–¥–∏–Ω—Ü–æ–≤–æ")

            // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏
            route.append(bus)
            if transit1.duration > 0 {
                route.append(transit1)
            }
            route.append(train)
            if transit2.duration > 0 {
                route.append(transit2)
            }
            route.append(subway)
            route.append(onfoot)
            way.departure = bus.departure.dateByAddingMinute(-10)! // 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–±–æ—Ä—ã
            way.arrival = onfoot.arrival
            way.duration = Int(way.arrival.timeIntervalSinceDate(way.departure) / 60.0)
            
        } else {
            // –≤ –î—É–±–∫–∏
            
            // –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç–∏
            let way = RouteStep(type: .Total)
            way.from = campus["title"] as? String
            way.to = dorm["title"] as? String
            route.append(way)
            
            // –ú–∞—Ä—à—Ä—É—Ç: –ü–µ—à–∫–æ–º->–ú–µ—Ç—Ä–æ->–ü–µ—Ä–µ—Ö–æ–¥->–≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞->–ü–µ—Ä–µ—Ö–æ–¥->–ê–≤—Ç–æ–±—É—Å

            // —Å—Ç–∞–Ω—Ü–∏–∏ –∂/–¥
            let stationFrom = stations![(campus["station"] as? String)!] as! Dictionary<String, AnyObject>
            let stationTo = stations![(dorm["station"] as? String)!] as! Dictionary<String, AnyObject>

            // —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            let subwayFrom = campus["subway"] as? String
            let subwayTo = stationFrom["subway"] as? String

            // –∞–≤—Ç–æ–±—É—Å–æ–º
            let bus = getNearestBusByArrival(timestamp, from: "–û–¥–∏–Ω—Ü–æ–≤–æ", to: "–î—É–±–∫–∏")
            
            // –ø–µ—Ä–µ—Ö–æ–¥ –°—Ç–∞–Ω—Ü–∏—è->–ê–≤—Ç–æ–±—É—Å
            let transit2 = RouteStep(type: .Transition)
            transit2.from = NSLocalizedString("Station", comment: "") // "–°—Ç–∞–Ω—Ü–∏—è"
            transit2.to = NSLocalizedString("Bus", comment: "") // "–ê–≤—Ç–æ–±—É—Å"
            transit2.duration = stationTo["transit"] as! Int
            transit2.departure = bus.departure.dateByAddingMinute(-transit2.duration)!
            transit2.arrival = bus.departure

            //—ç–ª–µ–∫—Ç—Ä–∏—á–∫–æ–π
            let train = getNearestTrainByArrival(transit2.departure, from: stationFrom, to: stationTo)

            // –ø–µ—Ä–µ—Ö–æ–¥ –ú–µ—Ç—Ä–æ->–°—Ç–∞–Ω—Ü–∏—è
            let transit1 = RouteStep(type: .Transition)
            transit1.from = subways![subwayTo!] as? String
            transit1.to = stationFrom["title"] as? String
            transit1.duration = stationFrom["transit"] as! Int
            transit1.departure = train.departure.dateByAddingMinute(-transit1.duration)!
            transit1.arrival = train.departure

            // –Ω–∞ –º–µ—Ç—Ä–æ
            let subway = getNearestSubwayByArrival(transit1.departure, from: subwayFrom!, to: subwayTo!)
            
            // –ø–µ—à–∫–æ–º
            let onfoot = getNearestOnFootByArrival(subway.departure, edu: campus)
            
            // TODO: –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–±—É—Å –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏
            
            // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏
            route.append(onfoot)
            route.append(subway)
            if transit1.duration > 0 {
                route.append(transit1)
            }
            route.append(train)
            if transit2.duration > 0 {
                route.append(transit2)
            }
            route.append(bus)
            way.departure = onfoot.departure.dateByAddingMinute(-10)! // 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–±–æ—Ä—ã
            way.arrival = bus.arrival
            way.duration = Int(way.arrival.timeIntervalSinceDate(way.departure) / 60.0)
        }
    }
    
    // MARK: - Route On Bus

    /**
    Returns the nearest bus by departure time
    
    Args:
        from(String): place of departure
        to(String): place of arrival
        departure(NSDate): time of departure
    
    Note:
        'from' and 'to' should not be equal and should be in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
    */
    func getNearestBusByDeparture(departure: NSDate, from: String, to: String, useAsterisk: Bool = true) -> RouteStep {
        // from and to should be in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
        let vals = ["–û–¥–∏–Ω—Ü–æ–≤–æ", "–î—É–±–∫–∏"]
        //assert from in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
        assert(vals.contains(from))
        //assert to in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
        assert(vals.contains(to))
        //assert(from != to)
        assert(from != to, "From equal To")
        
        // –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞ (–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        let times = scheduleService.getScheduleBus(from, to: to, timestamp: departure)
        
        if times == nil || times!.count == 0 {
            //TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞")
            return RouteStep()
        }
 
        // –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–π—Å–∞ (–º–∏–Ω–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è)
        var minInterval: Double = 24*60*60 // –º–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å—É—Ç–∫–∏)
        var busDeparture: NSDate?          // –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        var slBlvdBus: Bool = false        // –∞–≤—Ç–æ–±—É—Å –¥–æ –º.–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä–∞

        for time in times! {
            var timeWithoutAsteriks = time
            // asterisk indicates bus arrival/departure station is '–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä'
            // it needs special handling
            if time.containsString("*") {
                if !useAsterisk { continue } // –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–±—É—Å –¥–æ –º. –°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä
                timeWithoutAsteriks = time.substringToIndex(time.endIndex.predecessor())
            }
            let departureTime = departure.dateByWithTime(timeWithoutAsteriks)!
            let interval: Double = departureTime.timeIntervalSinceDate(departure)
            //TODO: # FIXME works incorrectly between weekday 6-7-1
            if interval > 0 && interval < minInterval {
                minInterval = interval
                busDeparture = departureTime
                slBlvdBus = time.containsString("*")
            }
        }
        if busDeparture == nil {
            //print("–ë–ª–∏–∂–∞–π—à–∏–π –∞–≤—Ç–æ–±—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            // get nearest bus on next day
            let newDeparture = departure.dateByAddingDay(1)!.dateByWithTime("00:00")!
            return getNearestBusByDeparture(newDeparture, from: from, to: to)
        }

        let bus: RouteStep = RouteStep(type: .Bus)
  
        bus.from = from
        if useAsterisk && slBlvdBus {
            bus.to = "–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä"
            bus.duration = 50 // –≤—Ä–µ–º—è –∞–≤—Ç–æ–±—É—Å–∞ –≤ –ø—É—Ç–∏
        } else {
            bus.to = to
            bus.duration = 15 // –≤—Ä–µ–º—è –∞–≤—Ç–æ–±—É—Å–∞ –≤ –ø—É—Ç–∏
        }
        bus.departure = busDeparture!
        //TODO: # FIXME: more real arrival time?
        bus.arrival = bus.departure.dateByAddingMinute(bus.duration)!
        
        return bus
    }

    /**
     Returns the nearest bus by arrival time
     
     Args:
     from(String): place of departure
     to(String): place of arrival
     arrival(NSDate): time of arrival
     
     Note:
     'from' and 'to' should not be equal and should be in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
     */
    func getNearestBusByArrival(arrival: NSDate, from: String, to: String, useAsterisk: Bool = true) -> RouteStep {
        // –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞ (–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        let times = scheduleService.getScheduleBus(from, to: to, timestamp: arrival)
        
        if times == nil || times!.count == 0 {
            //TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞")
            return RouteStep()
        }
        
        let bus: RouteStep = RouteStep(type: .Bus)
        
        bus.from = from
        bus.to = to
        bus.duration = 15 // –≤—Ä–µ–º—è –∞–≤—Ç–æ–±—É—Å–∞ –≤ –ø—É—Ç–∏

        // –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–π—Å–∞ (–º–∏–Ω–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è)
        var minInterval: Double = 24*60*60 // –º–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å—É—Ç–∫–∏)
        var busDeparture: NSDate?          // –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        //var slBlvdBus: Bool = false        // –∞–≤—Ç–æ–±—É—Å –¥–æ –º.–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä–∞
        
        for time in times! {
            var timeWithoutAsteriks = time
            // asterisk indicates bus arrival/departure station is '–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä'
            // it needs special handling
            if time.containsString("*") {
                if !useAsterisk { continue } // –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–±—É—Å –¥–æ –º. –°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä
                timeWithoutAsteriks = time.substringToIndex(time.endIndex.predecessor())
            }
            let departureTime = arrival.dateByWithTime(timeWithoutAsteriks)!
            let arrivalTime = departureTime.dateByAddingMinute(bus.duration)! // duration = 15 minute
            let interval: Double = arrival.timeIntervalSinceDate(arrivalTime)
            //TODO: # FIXME works incorrectly between weekday 6-7-1
            if interval > 0 && interval < minInterval {
                minInterval = interval
                busDeparture = departureTime
                //slBlvdBus = time.containsString("*")
            }
        }
        if busDeparture == nil {
            //print("–ë–ª–∏–∂–∞–π—à–∏–π –∞–≤—Ç–æ–±—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            // get nearest bus on next day
            let newArrival = arrival.dateByAddingDay(-1)!.dateByWithTime("23:59")!
            return getNearestBusByArrival(newArrival, from: from, to: to)
        }
        
        bus.departure = busDeparture!
        //TODO: # FIXME: more real arrival time?
        bus.arrival = bus.departure.dateByAddingMinute(bus.duration)!
        
        return bus
    }
    
    // MARK: - Route On Train

    /*
    A module which calculates the nearest train using an external API (Yandex.Rasp)
    Note that developer key for Yandex.Rasp is required (stored in .train_api_key)
    Also caches a schedule for today and two days later for faster access
    Key location and cached schedules' files are likely to change in future
    */

    /*
    Returns the nearest train by departure time
    
    Args:
        from(Dictionary): place of departure
        to(Dictionary): place of arrival
        departure(NSDate): time of departure
    
    Note:
        'from' and 'to' should not be equal and should be in STATIONS
    */
    func getNearestTrainByDeparture(departure: NSDate, from: Dictionary<String, AnyObject>, to: Dictionary<String, AnyObject>) -> RouteStep {
        //assert _from in STATIONS
        //assert _to in STATIONS
        
        let fromCode = from["code"] as? String
        let toCode = to["code"] as? String
        
        // –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫
        let trains = scheduleService.getScheduleTrain(fromCode!, to: toCode!, timestamp: departure)
        
        if trains == nil || trains!.count == 0 {
            //TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫")
            return RouteStep()
        }

        // –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–π—Å–∞ (–º–∏–Ω–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è)
        var minInterval: Double = 24*60*60 // –º–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å—É—Ç–∫–∏)
        var trainInfo: JSON? // –Ω–∞–π–¥–µ–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–µ
        for train in trains!.array! {
            let departureTime = train["departure"].string!.date()
            let interval: Double = departureTime!.timeIntervalSinceDate(departure)
            if interval > 0 && interval < minInterval {
                minInterval = interval
                trainInfo = train
            }
        }

        if trainInfo == nil {
            //print("–ë–ª–∏–∂–∞–π—à–∞—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            // get nearest train on next day
            let newDeparture = departure.dateByAddingDay(1)!.dateByWithTime("00:00")!
            return getNearestTrainByDeparture(newDeparture, from: from, to: to)
        }
        
        let train: RouteStep = RouteStep(type: .Train)
        
        train.from = from["title"] as? String
        train.to = to["title"] as? String
        train.trainName = trainInfo!["title"].string //"–ö—É–±–∏–Ω–∫–∞ 1 - –ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª)"
        train.stops = trainInfo!["stops"].string //"–≤–µ–∑–¥–µ"
        train.departure = trainInfo!["departure"].string!.date()!
        train.arrival = trainInfo!["arrival"].string!.date()!
        train.duration = Int(train.arrival.timeIntervalSinceDate(train.departure) / 60)
        //train.duration = trainInfo!["duration"].int! / 60
        train.url = "https://rasp.yandex.ru/"
        
        return train
    }

    /*
    Returns the nearest train by arrival time
    
    Args:
    from(Dictionary): place of departure
    to(Dictionary): place of arrival
    arrival(NSDate): time of arrival
    
    Note:
    'from' and 'to' should not be equal and should be in STATIONS
    */
    func getNearestTrainByArrival(arrival: NSDate, from: Dictionary<String, AnyObject>, to: Dictionary<String, AnyObject>) -> RouteStep {
        //assert _from in STATIONS
        //assert _to in STATIONS
        
        let fromCode = from["code"] as? String
        let toCode = to["code"] as? String
        
        // –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫
        let trains = scheduleService.getScheduleTrain(fromCode!, to: toCode!, timestamp: arrival)
        
        if trains == nil || trains!.count == 0 {
            //TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫")
            return RouteStep()
        }
        
        // –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–π—Å–∞ (–º–∏–Ω–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è)
        var minInterval: Double = 24*60*60 // –º–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å—É—Ç–∫–∏)
        var trainInfo: JSON? // –Ω–∞–π–¥–µ–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–µ
        for train in trains!.array! {
            let arrivalTime = train["arrival"].string!.date()!
            let interval: Double = arrival.timeIntervalSinceDate(arrivalTime)
            if interval > 0 && interval < minInterval {
                minInterval = interval
                trainInfo = train
            }
        }
        
        if trainInfo == nil {
            //print("–ë–ª–∏–∂–∞–π—à–∞—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            // get nearest train on next day
            let newArrival = arrival.dateByAddingDay(-1)!.dateByWithTime("23:59")!
            return getNearestTrainByArrival(newArrival, from: from, to: to)
        }
        
        let train: RouteStep = RouteStep(type: .Train)
        
        train.from = from["title"] as? String
        train.to = to["title"] as? String
        train.trainName = trainInfo!["title"].string //"–ö—É–±–∏–Ω–∫–∞ 1 - –ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª)"
        train.stops = trainInfo!["stops"].string //"–≤–µ–∑–¥–µ"
        train.departure = trainInfo!["departure"].string!.date()!
        train.arrival = trainInfo!["arrival"].string!.date()!
        train.duration = Int(train.arrival.timeIntervalSinceDate(train.departure) / 60)
        //train.duration = trainInfo!["duration"].int! / 60
        train.url = "https://rasp.yandex.ru/"
        
        return train
    }

    // MARK: - Route On Subway

    // Subway Route Data (timedelta in minutes)
    let subwayDuration = [
        "kuntsevskaya": [ // –ö—É–Ω—Ü–µ–≤—Å–∫–∞—è
            "strogino":           16, // –°—Ç—Ä–æ–≥–∏–Ω–æ
            "semyonovskaya":      28, // –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è
            "kurskaya":           21, // –ö—É—Ä—Å–∫–∞—è
            "leninsky_prospekt" : 28  // –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç
        ],
        "belorusskaya": [ // –ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è
            "aeroport":  6, // –ê—ç—Ä–æ–ø–æ—Ä—Ç
            "tverskaya": 4  // –¢–≤–µ—Ä—Å–∫–∞—è
        ],
        "begovaya": [ // –ë–µ–≥–æ–≤–∞—è
            "tekstilshchiki": 23, // –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏
            "lubyanka":       12, // –õ—É–±—è–Ω–∫–∞
            "shabolovskaya":  20, // –®–∞–±–æ–ª–æ–≤—Å–∫–∞—è
            "kuznetsky_most":  9, // –ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç
            "paveletskaya":   17, // –ü–∞–≤–µ–ª–µ—Ü–∫–∞—è
            "kitay-gorod":    11  // –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥
        ],
        "slavyansky_bulvar": [ // –°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä
            "strogino":          18, // –°—Ç—Ä–æ–≥–∏–Ω–æ
            "semyonovskaya":     25, // –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è
            "kurskaya":          18, // –ö—É—Ä—Å–∫–∞—è
            "leninsky_prospekt": 25, // –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç
            "aeroport":          26, // –ê—ç—Ä–æ–ø–æ—Ä—Ç
            "tverskaya":         22, // –¢–≤–µ—Ä—Å–∫–∞—è
            "tekstilshchiki":    35, // –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏
            "lubyanka":          21, // –õ—É–±—è–Ω–∫–∞
            "shabolovskaya":     22, // –®–∞–±–æ–ª–æ–≤—Å–∫–∞—è
            "kuznetsky_most":    22, // –ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç
            "paveletskaya":      17, // –ü–∞–≤–µ–ª–µ—Ü–∫–∞—è
            "kitay-gorod":       20  // –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥
        ]
    ]
    let subwayClosesTime = "01:00"
    let subwayOpensTime = "05:50"

    /**
    Returns the time required to get from one subway station to another
    
    Args:
        from(String): Russian name of station of departure
        to(String): Russian name of station of arrival
    
    Note:
        'from' and 'to' must exist in SUBWAY_DATA.keys or any of SUBWAY_DATA[key].values
    */
    func getSubwayDuration(from: String, to: String) -> Int {
        if let fromStation = subwayDuration[from] {
            if let result = fromStation[to] {
                return result
            }
        }
        if let toStation = subwayDuration[to] {
            if let result = toStation[from] {
                return result
            }
        }
        print("not fround subway data from: \(from) to: \(to)")
        return 0
    }
    
    /**
    Returns the nearest subway route by departure time
    
    Args:
        from(String): Russian name of station of departure
        to(String): Russian name of station of arrival
        departure(NSDate): time of departure
    
    Note:
        'from' and 'to' must exist in SUBWAY_DATA.keys or any of SUBWAY_DATA[key].values
    */
    func getNearestSubwayByDeparture(departure: NSDate, from: String, to: String) -> RouteStep {
        let subway: RouteStep = RouteStep(type: .Subway)

        subway.from = subways![from] as? String
        subway.to = subways![to] as? String
        subway.duration = getSubwayDuration(from, to: to)

        let subwayCloses = departure.dateByWithTime(subwayClosesTime)
        let subwayOpens = departure.dateByWithTime(subwayOpensTime)
        // subwayCloses <= timestamp <= subwayOpens
        if subwayCloses!.compare(departure) != .OrderedDescending
            && departure.compare(subwayOpens!) != .OrderedDescending {
            // subway is still closed
            subway.departure = subwayOpens!
        } else {
            subway.departure = departure
        }
        subway.arrival = subway.departure.dateByAddingMinute(subway.duration)!
        
        return subway
    }

    /**
     Returns the nearest subway route by arrival time
     
     Args:
     from(String): Russian name of station of departure
     to(String): Russian name of station of arrival
     arrival(NSDate): time of arrival
     
     Note:
     'from' and 'to' must exist in SUBWAY_DATA.keys or any of SUBWAY_DATA[key].values
     */
    func getNearestSubwayByArrival(arrival: NSDate, from: String, to: String) -> RouteStep {
        let subway: RouteStep = RouteStep(type: .Subway)
        
        subway.from = subways![from] as? String
        subway.to = subways![to] as? String
        subway.duration = getSubwayDuration(from, to: to)
        
        let subwayCloses = arrival.dateByWithTime(subwayClosesTime)
        let subwayOpens = arrival.dateByWithTime(subwayOpensTime)
        // subwayCloses <= timestamp <= subwayOpens
        if subwayCloses!.compare(arrival) != .OrderedDescending
            && arrival.compare(subwayOpens!) != .OrderedDescending {
                // subway is still closed
                subway.departure = subwayOpens!
                subway.arrival = subwayOpens!.dateByAddingMinute(subway.duration)!
        } else {
            subway.departure = arrival.dateByAddingMinute(-subway.duration)!
            subway.arrival = arrival
        }
        subway.arrival = subway.departure.dateByAddingMinute(subway.duration)!
        
        return subway
    }
    
    // MARK: - Route On Foot

    /**
    Returns a map url for displaying in a webpage
    
    Args:
        edu(Dictionary): which education campus the route's destination is
        urlType(Optional[String]): whether the map should be interactive
    
    Note:
        'edu' should be a value from EDUS
        'urlType' should be in {'static', 'js'}
    */
    func formMapUrl(edu: Dictionary<String, AnyObject>, urlType: String = "static") -> String? {
        let mapSource = edu["mapsrc"] as! String
        return String(format: "https://api-maps.yandex.ru/services/constructor/1.0/%@/?sid=%@", urlType, mapSource)
    }
    
    /**
    Returns the nearest onfoot route by departure time
    
    Args:
        edu(Dictionary): place of arrival
        departure(NSDate): time of departure from subway exit
    
    Note:
        'edu' should be a value from EDUS
    */
    func getNearestOnFootByDeparture(departure: NSDate, edu: Dictionary<String, AnyObject>) -> RouteStep {
        let onfoot: RouteStep = RouteStep(type: .Onfoot)
        
        onfoot.duration = edu["onfoot"] as! Int
        onfoot.departure = departure
        onfoot.arrival = departure.dateByAddingMinute(onfoot.duration)!
        //onfoot.map = formMapUrl(edu["mapsrc"] as! String)
        onfoot.map = (edu["name"] as! String) + ".png"
        
        return onfoot
    }    

    /**
     Returns the nearest onfoot route by arrival time
     
     Args:
     edu(Dictionary): place of arrival
     arrival(NSDate): time of arrival from campus exit
     
     Note:
     'edu' should be a value from EDUS
     */
    func getNearestOnFootByArrival(arrival: NSDate, edu: Dictionary<String, AnyObject>) -> RouteStep {
        let onfoot: RouteStep = RouteStep(type: .Onfoot)
        
        onfoot.duration = edu["onfoot"] as! Int
        onfoot.departure = arrival.dateByAddingMinute(-onfoot.duration)!
        onfoot.arrival = arrival
        //onfoot.map = formMapUrl(edu["mapsrc"] as! String)
        onfoot.map = (edu["name"] as! String) + ".png"
        
        return onfoot
    }
}
