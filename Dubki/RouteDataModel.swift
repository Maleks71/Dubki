//
//  RouteDataModel.swift
//  Dubki
//
//  Created by Alexander Morenko on 30.10.15.
//  Copyright ¬© 2015 Alexander Morenko. All rights reserved.
//

import UIKit

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
struct RouteStep {
    var from: String?        // –æ—Ç–∫—É–¥–∞ (—Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ, –∂/–¥, –∞–≤—Ç–æ–±—É—Å–∞)
    var to: String?          // –∫—É–¥–∞ (—Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ, –∂/–¥, –∞–≤—Ç–æ–±—É—Å–∞)
    var stations: String?    // –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∂/–¥ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∏ –º–µ—Ç—Ä–æ
    var departure: NSDate?   // –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    var arrival: NSDate?     // –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    var time: Int?           // –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    var title: String?       // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞ - –≤–∏–¥ —à–∞–≥–∞ –∏ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω)
    var detail: String?      // –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞ - —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–∫—É–¥–∞/–∫—É–¥–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è/–ø—Ä–∏–±—ã—Ç–∏—è (–¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω)
    var map: String?         // –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–ª–µ–ª–µ–π —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    var url: String?         // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    init() {
        
    }
    
    init(title:String, detail: String) {
        self.title = title
        self.detail = detail
    }

    init(title:String, detail: String, url: String) {
        self.title = title
        self.detail = detail
        self.url = url
    }
}

// Singleton Class
class RouteDataModel: NSObject {
    
    static let sharedInstance = RouteDataModel()

    // –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏–π
    let dormitories = NSArray(contentsOfFile: NSBundle.mainBundle().pathForResource("Dormitories", ofType: "plist")!)
    // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø—É—Å–æ–≤
    let campuses = NSArray(contentsOfFile: NSBundle.mainBundle().pathForResource("Campuses", ofType: "plist")!)
    // –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
    let subways = NSDictionary(contentsOfFile: NSBundle.mainBundle().pathForResource("Subways", ofType: "plist")!)
    // –û–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∂/–¥
    let stations = NSDictionary(contentsOfFile: NSBundle.mainBundle().pathForResource("Stations", ofType: "plist")!)
    
    // –≤–∏–¥ —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    let bus = NSLocalizedString("Bus", comment: "") // "üöå –ê–≤—Ç–æ–±—É—Å"
    let rail = NSLocalizedString("Rail", comment: "") // "üöä –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞"
    let subway = NSLocalizedString("Subway", comment: "") // "üöá –ú–µ—Ç—Ä–æ"
    let onfoot = NSLocalizedString("OnFoot", comment: "") // "üö∂ –ü–µ—à–∫–æ–º"

    // for route
    var direction: Int? // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑/–≤ –î—É–±–∫–∏
    var campus: Dictionary<String, AnyObject>? // –ö–∞–º–ø—É—Å –≤/–∏–∑
    var when: NSDate? // –∫–æ–≥–¥–∞ - –≤—Ä–µ–º—è
//    var route = [
//        ["title": "–ù–µ –∑–∞–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞", "detail": ""],
//    ]
    // –ú–∞—Ä—à—Ä—É—Ç
    var route: [RouteStep] = [RouteStep(title: "–ù–µ –∑–∞–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞", detail: "")]
    
    override init() {
        super.init()
        
        // load array of campuses from resource
        //let campusesPath = NSBundle.mainBundle().pathForResource("Campuses", ofType: "plist")
        //campuses = NSArray(contentsOfFile: campusesPath!)
        //print(campuses?.count)
        
    }
    
    func calculateRoute(direction: Int, campus: Dictionary<String, AnyObject>, when: NSDate) {
        
        self.direction = direction
        self.campus = campus
        self.when = when
        
        if direction == 0 {
//            route = [
//                ["title": "–î—É–±–∫–∏ ‚Üí –°—Ç—Ä–æ–≥–∏–Ω–æ", "detail": "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 09:00 | –ø—Ä–∏–±—ã—Ç–∏–µ: 10:18"],
//                ["title": bus, "detail": "–î—É–±–∫–∏ (09:10) ‚Üí –û–¥–∏–Ω—Ü–æ–≤–æ (09:25)"],
//                ["title": rail, "detail": "–ö—É–±–∏–Ω–∫–∞ 1 - –ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª) (09:31 ‚Üí 09:47)\n–û—Å—Ç–∞–Ω–æ–≤–∫–∏: –≤–µ–∑–¥–µ\n–í—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ö—É–Ω—Ü–µ–≤–æ", "url": "http://rasp.yandex.ru/"],
//                ["title": subway, "detail":"–ö—É–Ω—Ü–µ–≤—Å–∫–∞—è (09:57) ‚Üí –°—Ç—Ä–æ–≥–∏–Ω–æ (10:12)"],
//                ["title": onfoot, "detail":"–ü—Ä–∏–º–µ—Ä–Ω–æ 6 –º–∏–Ω—É—Ç"]
//            ]
            route = [
                RouteStep(title: "–î—É–±–∫–∏ ‚Üí –°—Ç—Ä–æ–≥–∏–Ω–æ", detail: "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 09:00 | –ø—Ä–∏–±—ã—Ç–∏–µ: 10:18"),
                RouteStep(title: bus, detail: "–î—É–±–∫–∏ (09:10) ‚Üí –û–¥–∏–Ω—Ü–æ–≤–æ (09:25)"),
                RouteStep(title: rail, detail: "–ö—É–±–∏–Ω–∫–∞ 1 - –ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª) (09:31 ‚Üí 09:47)\n–û—Å—Ç–∞–Ω–æ–≤–∫–∏: –≤–µ–∑–¥–µ\n–í—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ö—É–Ω—Ü–µ–≤–æ", url: "http://rasp.yandex.ru/"),
                RouteStep(title: subway, detail: "–ö—É–Ω—Ü–µ–≤—Å–∫–∞—è (09:57) ‚Üí –°—Ç—Ä–æ–≥–∏–Ω–æ (10:12)"),
                RouteStep(title: onfoot, detail: "–ü—Ä–∏–º–µ—Ä–Ω–æ 6 –º–∏–Ω—É—Ç", url: "strogino.jpg")
            ]
        } else {
//            route = [
//                ["title": "–°—Ç—Ä–æ–≥–∏–Ω–æ ‚Üí –î—É–±–∫–∏", "detail": "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 15:31 | –ø—Ä–∏–±—ã—Ç–∏–µ: 17:35"],
//                ["title": onfoot, "detail": "–ü—Ä–∏–º–µ—Ä–Ω–æ 6 –º–∏–Ω—É—Ç"],
//                ["title": subway, "detail": "–°—Ç—Ä–æ–≥–∏–Ω–æ (15:37) ‚Üí –ö—É–Ω—Ü–µ–≤—Å–∫–∞—è (15:52)"],
//                ["title": rail, "detail": "–ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª) - –ú–æ–∂–∞–π—Å–∫ (16:27 ‚Üí 16:39)\n–û—Å—Ç–∞–Ω–æ–≤–∫–∏: –†–∞–±–æ—á–∏–π –ü–æ—Å—ë–ª–æ–∫, –°–µ—Ç—É–Ω—å, –û–¥–∏–Ω—Ü–æ–≤–æ\n–í—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –û–¥–∏–Ω—Ü–æ–≤–æ", "url": "http://rasp.yandex.ru/"],
//                ["title": bus, "detail": "–û–¥–∏–Ω—Ü–æ–≤–æ (17:20) ‚Üí –î—É–±–∫–∏ (17:35)"]
//            ]
            route = [
                RouteStep(title: "–°—Ç—Ä–æ–≥–∏–Ω–æ ‚Üí –î—É–±–∫–∏", detail: "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 15:31 | –ø—Ä–∏–±—ã—Ç–∏–µ: 17:35"),
                RouteStep(title: onfoot, detail: "–ü—Ä–∏–º–µ—Ä–Ω–æ 6 –º–∏–Ω—É—Ç", url: "strogino.jpg"),
                RouteStep(title: subway, detail: "–°—Ç—Ä–æ–≥–∏–Ω–æ (15:37) ‚Üí –ö—É–Ω—Ü–µ–≤—Å–∫–∞—è (15:52)"),
                RouteStep(title: rail, detail: "–ú–æ—Å–∫–≤–∞ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª) - –ú–æ–∂–∞–π—Å–∫ (16:27 ‚Üí 16:39)\n–û—Å—Ç–∞–Ω–æ–≤–∫–∏: –†–∞–±–æ—á–∏–π –ü–æ—Å—ë–ª–æ–∫, –°–µ—Ç—É–Ω—å, –û–¥–∏–Ω—Ü–æ–≤–æ\n–í—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –û–¥–∏–Ω—Ü–æ–≤–æ", url: "http://rasp.yandex.ru/"),
                RouteStep(title: bus, detail: "–û–¥–∏–Ω—Ü–æ–≤–æ (17:20) ‚Üí –î—É–±–∫–∏ (17:35)")
            ]
        }
        
    }

    // MARK: - Route On Bus

    let BUS_API_URL = "http://dubkiapi2.appspot.com/sch"
    
    // from and to should be in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
    func getNearestBus(from: String, to: String, inout timestamp: NSDate) -> RouteStep {
        //assert from in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
        //assert to in {'–û–¥–∏–Ω—Ü–æ–≤–æ', '–î—É–±–∫–∏'}
        //assert from != to
        
        var _from: String
        var _to: String
        
        let weekday = getDayOfWeek(timestamp)
        // today is either {'','*–°—É–±–±–æ—Ç–∞', '*–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
        if weekday == 7 {
            if from == "dubki" {
                _from = "–î—É–±–∫–∏–°—É–±–±–æ—Ç–∞"
            } else if to == "dubki" {
                _to = "–î—É–±–∫–∏–°—É–±–±–æ—Ç–∞"
            }
        } else if weekday == 0 {
            if from == "dubki" {
                _from = "–î—É–±–∫–∏–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            } else if to == "dubki" {
                _to = "–î—É–±–∫–∏–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            }
        }

        var bus: RouteStep = RouteStep()
        bus.from = from
        bus.to = to
        
        return bus
    }

    // MARK: - Route On Train

/*
    // maps edus to preferred stations
    // TODO: move to Campuses.plist
    let prefStations = [
        "aeroport":      "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è",
        "strogino":      "–ö—É–Ω—Ü–µ–≤–æ",
        "myasnitskaya":  "–ë–µ–≥–æ–≤–∞—è",
        "vavilova":      "–ö—É–Ω—Ü–µ–≤–æ",
        "izmailovo":     "–ö—É–Ω—Ü–µ–≤–æ",
        "tekstilshiki":  "–ë–µ–≥–æ–≤–∞—è",
        "st_basmannaya": "–ö—É–Ω—Ü–µ–≤–æ",
        "shabolovskaya": "–ë–µ–≥–æ–≤–∞—è",
        "petrovka":      "–ë–µ–≥–æ–≤–∞—è",
        "paveletskaya":  "–ë–µ–≥–æ–≤–∞—è",
        "ilyinka":       "–ë–µ–≥–æ–≤–∞—è",
        "trehsvyat_b":   "–ë–µ–≥–æ–≤–∞—è",
        "trehsvyat_m":   "–ë–µ–≥–æ–≤–∞—è",
        "hitra":         "–ë–µ–≥–æ–≤–∞—è",
        "gnezdo":        "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è"
    ]

    // delta to pass from railway station to subway station
    // TODO: move to Stations.plist
    let ttsDeltas = [
        "–ö—É–Ω—Ü–µ–≤–æ":    10,
        "–§–∏–ª–∏":        7,
        "–ë–µ–≥–æ–≤–∞—è":     5,
        "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è": 5
    ]

    // relation between railway station and subway station
    // TODO: move to Stations.plist
    let ttsNames = [
        "–ö—É–Ω—Ü–µ–≤–æ":     "–ö—É–Ω—Ü–µ–≤—Å–∫–∞—è",
        "–§–∏–ª–∏":        "–§–∏–ª–∏",
        "–ë–µ–≥–æ–≤–∞—è":     "–ë–µ–≥–æ–≤–∞—è",
        "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è": "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è"
    ]
    
    let STATIONS = [
        "–û–¥–∏–Ω—Ü–æ–≤–æ" :   "c10743",
        "–ö—É–Ω—Ü–µ–≤–æ":     "s9601728",
        "–§–∏–ª–∏":        "s9600821",
        "–ë–µ–≥–æ–≤–∞—è":     "s9601666",
        "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è": "s2000006"
    ]
*/
    let API_KEY_FILE = ".train_api_key"
    
    let TRAIN_API_URL = "https://api.rasp.yandex.net/v1.0/search/?apikey=%s&format=json&date=%s&from=%s&to=%s&lang=ru&transport_types=suburban"

    func getNearestTrain(from: String, to: String, inout timestamp: NSDate) -> RouteStep {
        var train: RouteStep = RouteStep()
        train.from = from
        train.to = to
        
        return train
    }

    // MARK: - Route On Subway

/*
    // TODO: move to Campuses.plist
    let subways = [
        "aeroport":      "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
        "myasnitskaya":  "–õ—É–±—è–Ω–∫–∞",
        "strogino":      "–°—Ç—Ä–æ–≥–∏–Ω–æ",
        "st_basmannaya": "–ö—É—Ä—Å–∫–∞—è",
        "tekstilshiki":  "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏",
        "vavilova":      "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
        "izmailovo":     "–°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è",
        "shabolovskaya": "–®–∞–±–æ–ª–æ–≤—Å–∫–∞—è",
        "petrovka":      "–ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç",
        "paveletskaya":  "–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è",
        "ilyinka":       "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥",
        "trehsvyat_b":   "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥",
        "trehsvyat_m":   "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥",
        "hitra":         "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥",
        "gnezdo":        "–¢–≤–µ—Ä—Å–∫–∞—è"
    ]
*/

    // Subway Route Data (timedelta in minutes)
    let subwayData = [
        "kuntsevskaya": [ // –ö—É–Ω—Ü–µ–≤—Å–∫–∞—è
            "strogino":            15, // –°—Ç—Ä–æ–≥–∏–Ω–æ
            "semenovskaya":        28, // –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è
            "kurskaya":            21, // –ö—É—Ä—Å–∫–∞—è
            "leninskiy_prospekt" : 28  // –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç
        ],
        "belorusskaya": [ // –ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è
            "aeroport":  6, // –ê—ç—Ä–æ–ø–æ—Ä—Ç
            "tverskaya": 4  // –¢–≤–µ—Ä—Å–∫–∞—è
        ],
        "begovaya": [ // –ë–µ–≥–æ–≤–∞—è
            "tekstilshiki":   22, // –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏
            "lubyanka":       12, // –õ—É–±—è–Ω–∫–∞
            "shabolovskaya":  20, // –®–∞–±–æ–ª–æ–≤—Å–∫–∞—è
            "kuzneckiy_most":  9, // –ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç
            "paveletskaya":   17, // –ü–∞–≤–µ–ª–µ—Ü–∫–∞—è
            "china-town":     11  // –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥
        ],
        "slavyanskiy_bulvar": [ // –°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä
            "strogino":           18, // –°—Ç—Ä–æ–≥–∏–Ω–æ
            "semenovskaya":       25, // –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è
            "kurskaya":           18, // –ö—É—Ä—Å–∫–∞—è
            "leninskiy_prospekt": 25, // –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç
            "aeroport":           26, // –ê—ç—Ä–æ–ø–æ—Ä—Ç
            "tekstilshiki":       35, // –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏
            "lubyanka":           21, // –õ—É–±—è–Ω–∫–∞
            "shabolovskaya":      22, // –®–∞–±–æ–ª–æ–≤—Å–∫–∞—è
            "kuzneckiy_most":     22, // –ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç
            "tverskaya":          22  // –¢–≤–µ—Ä—Å–∫–∞—è
        ]
    ]
    let subwayClosesTime = "01:00"
    let subwayOpensTime = "05:50"

    func getSubwayData(from: String, to: String) -> Int {
        if let fromStation = subwayData[from] {
            if let result = fromStation[to] {
                return result
            }
        }
        if let toStation = subwayData[to] {
            if let result = toStation[from] {
                return result
            }
        }
        print("not fround subway data from: \(from) to: \(to)")
        return 0
    }
    
    func getNearestSubway(from: String, to: String, inout timestamp: NSDate) -> RouteStep {
        var subway: RouteStep = RouteStep()
        subway.from = from
        subway.to = to

        let subwayCloses = dateChangeTime(timestamp, time: subwayClosesTime)
        let subwayOpens = dateChangeTime(timestamp, time: subwayOpensTime)
        // subwayCloses <= timestamp <= subwayOpens
        if subwayCloses.compare(timestamp) != .OrderedDescending
            && timestamp.compare(subwayOpens) != .OrderedDescending {
            // subway is still closed
            timestamp = subwayOpens
        }
        subway.departure = timestamp
        subway.arrival = dateByAddingMinute(timestamp, minute: getSubwayData(from, to: to))
        
        return subway
    }

    // MARK: - Route On Foot
/*
    // On Foot Data (timedelta in minutes) 
    // TODO: move to Campuses.plist
    let onFootEduDeltas = [
        "aeroport":      14,
        "strogino":       6,
        "myasnitskaya":   6,
        "vavilova":       5,
        "izmailovo":     16,
        "tekstilshiki":  10,
        "st_basmannaya": 16,
        "shabolovskaya":  4,
        "petrovka":       6,
        "paveletskaya":   5,
        "ilyinka":        7,
        "trehsvyat_b":   13,
        "trehsvyat_m":   15,
        "hitra":         13,
        "gnezdo":         5
    ]
    
    // TODO: move to Campuses.plist
    let mapSources = [
        "aeroport":      "9kfYmO7lbg2o_YuSTvZqiY9rCevo23cs",
        "strogino":      "pMeBRyKZjz3PnQn4HCZKIlagbMIv2Bxp",
        "myasnitskaya":  "GGWd7qLfRklaR5KSQQpKFOiJT8RPFGO-",
        "vavilova":      "_Cz-NprpRRfD15AECXvyxGQb5N7RY3xC",
        "izmailovo":     "tTSwzei04UwodpOe5ThQSKwo47ZiR8aO",
        "tekstilshiki":  "IcVLk9vNC1afHy5ge05Ae07wahHXZZ7H",
        "st_basmannaya": "LwunOFh66TXk8NyRAgKpsssV0Gdy34pG",
        "shabolovskaya": "0enMIqcJ_dLy8ShEHN34Lu-4XBAHsrno",
        "petrovka":      "pSiE6gI2ftRfAGBDauSW0G0H2o9R726u",
        "paveletskaya":  "1SimW8pYfuzER0tbTEYFs1RFaNUFnhh-",
        "ilyinka":       "7UEkPE7kT0Bhb4rOzDbk2O57LdWBE8Lq",
        "trehsvyat_b":   "_WWkurGGUbabsiPE9xgdLP_iJ61vbJrZ",
        "trehsvyat_m":   "jBGwqmV8V-JjFzbG2M_13sGlAUVqug-9",
        "hitra":         "j1cHqL5k2jw_MK31dlBLEwPPPmj72NNg",
        "gnezdo":        "_a_UjKz_rMbmf2l_mWtsRUjlaqlRySIS"
    ]
*/
    func formMapUrl(mapSource: String, type: String = "img") -> String? {
        if type == "img" {
            return "https://api-maps.yandex.ru/services/constructor/1.0/static/?sid=" + mapSource
        } else if type == "script" {
            return "https://api-maps.yandex.ru/services/constructor/1.0/js/?sid=" + mapSource
        }
        return nil
    }
    
    func getNearestOnFoot(edu: Dictionary<String, AnyObject>, timestamp: NSDate) -> RouteStep {
        let onFootEduDeltas: Int = edu["onfoot"] as! Int

        var onfoot: RouteStep = RouteStep()
        onfoot.departure = timestamp
        onfoot.arrival = dateByAddingMinute(timestamp, minute: onFootEduDeltas)
        onfoot.time = onFootEduDeltas
        onfoot.map = formMapUrl(edu["mapsrc"] as! String)
        
        return onfoot
    }

    /*******************************/
/*
    // dormitory
    let dorms = [
        "dubki": "–î—É–±–∫–∏",
    ]
    
    // campus
    let edus = [
        "aeroport":      "–ö–æ—á–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ (–º–µ—Ç—Ä–æ –ê—ç—Ä–æ–ø–æ—Ä—Ç)",
        "strogino":      "–°—Ç—Ä–æ–≥–∏–Ω–æ",
        "myasnitskaya":  "–ú—è—Å–Ω–∏—Ü–∫–∞—è (–º–µ—Ç—Ä–æ –õ—É–±—è–Ω–∫–∞)",
        "vavilova":      "–í–∞–≤–∏–ª–æ–≤–∞ (–º–µ—Ç—Ä–æ –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç)",
        "izmailovo":     "–ö–∏—Ä–ø–∏—á–Ω–∞—è —É–ª–∏—Ü–∞ (–º–µ—Ç—Ä–æ –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è)",
        "tekstilshiki":  "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏",
        "st_basmannaya": "–°—Ç–∞—Ä–∞—è –ë–∞—Å–º–∞–Ω–Ω–∞—è",
        "shabolovskaya": "–®–∞–±–æ–ª–æ–≤—Å–∫–∞—è",
        "petrovka":      "–ü–µ—Ç—Ä–æ–≤–∫–∞ (–º–µ—Ç—Ä–æ –ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç)",
        "paveletskaya":  "–ú–∞–ª–∞—è –ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è (–º–µ—Ç—Ä–æ –ü–∞–≤–µ–ª–µ—Ü–∫–∞—è)",
        "ilyinka":       "–ò–ª—å–∏–Ω–∫–∞ (–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥)",
        "trehsvyat_b":   "–ë–æ–ª—å—à–æ–π –¢—Ä—ë—Ö—Å–≤—è—Ç–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ (–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥)",
        "trehsvyat_m":   "–ú–∞–ª—ã–π –¢—Ä—ë—Ö—Å–≤—è—Ç–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ (–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥)",
        "hitra":         "–•–∏—Ç—Ä–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ (–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥)",
        "gnezdo":        "–ú–∞–ª—ã–π –ì–Ω–µ–∑–¥–Ω–∏–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ (–º–µ—Ç—Ä–æ –¢–≤–µ—Ä—Å–∫–∞—è)"
    ]
*/
     
    // MARK: - Function for working with date
    
    func dateChangeTime(date: NSDate, time: String) -> NSDate {
        let dateFormatter = NSDateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd "
        
        let dateString = dateFormatter.stringFromDate(date) + time
        
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
        
        return dateFormatter.dateFromString(dateString)!
    }

    func dateByAddingMinute(date: NSDate, minute: Int) -> NSDate {
        return date.dateByAddingTimeInterval(Double(minute * 60))
        //let myCalendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)!
        //let myCalendar = NSCalendar.currentCalendar()
        //return myCalendar.dateByAddingUnit([.Minute], value: minute, toDate: date, options: [])!
    }
    
    func getDayOfWeek(todayDate: NSDate) -> Int {
        //let weekdayName = ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]
        
        //let myCalendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)!
        let myCalendar = NSCalendar.currentCalendar()
        let myComponents = myCalendar.components(NSCalendarUnit.Weekday, fromDate: todayDate)
        let weekDay = myComponents.weekday - 1
        return weekDay
        //return weekdayName[weekDay]
    }
    
    // get interval from two date (of date on further date and pass the earlier date as parameter, this would give the time difference in seconds)
    //let interval = date1.timeIntervalSinceDate(date2)
    
    // get component from date
//    let date = NSDate()
//    let calendar = NSCalendar.currentCalendar()
//    let components = calendar.components(.CalendarUnitHour | .CalendarUnitMinute, fromDate: date)
//    let hour = components.hour
//    let minutes = components.minute
}
